// <auto-generated />
using System;
using Infrastructure.SharedContext.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250811172214_v4")]
    partial class v4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.UserContext.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Core.VaccineCardContext.Entities.VaccineCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Cpf");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("UserSusNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("SusNumber");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccineNamesSerialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_VaccineCard");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("VaccineCard", (string)null);
                });

            modelBuilder.Entity("Core.VaccineContext.Entities.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("CategoryType");

                    b.Property<int>("DoseType")
                        .HasMaxLength(10)
                        .HasColumnType("INT")
                        .HasColumnName("DoseType");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Index");

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Mandatory");

                    b.Property<int?>("MinimumAgeInMonths")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("MinimumAgeInMonths");

                    b.HasKey("Id")
                        .HasName("PK_Vaccine");

                    b.ToTable("Vaccine", (string)null);
                });

            modelBuilder.Entity("Core.UserContext.Entities.User", b =>
                {
                    b.OwnsOne("Core.UserContext.ValueObjects.UserAge", "Age", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Number")
                                .HasMaxLength(3)
                                .HasColumnType("INT")
                                .HasColumnName("Age");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Core.UserContext.ValueObjects.UserAllergy", "Allergy", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(200)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Description");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("Allergy");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Core.UserContext.ValueObjects.UserCpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("NumberCpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Cpf");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Core.UserContext.ValueObjects.UserEmail", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Email");

                            b1.Property<string>("Hash")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("EmailHash");

                            b1.HasKey("UserId");

                            b1.HasIndex("Address")
                                .IsUnique()
                                .HasDatabaseName("IX_User_Email");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Core.UserContext.ValueObjects.UserGender", "Gender", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Gender");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Core.UserContext.ValueObjects.UserName", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Core.UserContext.ValueObjects.UserSusNumber", "SusNumber", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("NumberSus")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("SusNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Age")
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Gender")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("SusNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.VaccineCardContext.Entities.VaccineCard", b =>
                {
                    b.HasOne("Core.UserContext.Entities.User", "user")
                        .WithOne("Card")
                        .HasForeignKey("Core.VaccineCardContext.Entities.VaccineCard", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Core.VaccineContext.Entities.Vaccine", b =>
                {
                    b.OwnsOne("Core.VaccineContext.ValueObjects.Manufacturer", "Manufacturer", b1 =>
                        {
                            b1.Property<Guid>("VaccineId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Enterprise")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Manufacture");

                            b1.HasKey("VaccineId");

                            b1.ToTable("Vaccine");

                            b1.WithOwner()
                                .HasForeignKey("VaccineId");
                        });

                    b.OwnsOne("Core.VaccineContext.ValueObjects.VaccineName", "vaccineName", b1 =>
                        {
                            b1.Property<Guid>("VaccineId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Name");

                            b1.HasKey("VaccineId");

                            b1.ToTable("Vaccine");

                            b1.WithOwner()
                                .HasForeignKey("VaccineId");
                        });

                    b.Navigation("Manufacturer")
                        .IsRequired();

                    b.Navigation("vaccineName")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.UserContext.Entities.User", b =>
                {
                    b.Navigation("Card")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
